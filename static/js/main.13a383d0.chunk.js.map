{"version":3,"sources":["component/Display.js","component/Button.js","component/ButtonPanel.js","logic/operate.js","component/App.js","logic/calculate.js","logic/isNumber.js","index.js"],"names":["Display","react_default","a","createElement","className","this","props","value","React","Component","Button","handleClick","_this","clickHandler","name","orange","wide","join","trim","onClick","ButtonPanel","buttonName","Button_Button","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","alert","div","Error","concat","App","state","total","next","setState","obj","test","result","includes","parseFloat","calculate","Display_Display","ButtonPanel_ButtonPanel","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.13a383d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Display.css\";\r\n\r\nexport default class Display extends React.Component {\r\n  static propTypes = {\r\n    value: PropTypes.string,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-display\">\r\n        <div>{this.props.value}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Button.css\";\r\n\r\nexport default class Button extends React.Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    orange: PropTypes.bool,\r\n    wide: PropTypes.bool,\r\n    clickHandler: PropTypes.func,\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.props.clickHandler(this.props.name);\r\n  };\r\n\r\n  render() {\r\n    const className = [\r\n      \"component-button\",\r\n      this.props.orange ? \"orange\" : \"\",\r\n      this.props.wide ? \"wide\" : \"\",\r\n    ];\r\n\r\n    return (\r\n      <div className={className.join(\" \").trim()}>\r\n        <button onClick={this.handleClick}>{this.props.name}</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Button from \"./Button\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./ButtonPanel.css\";\r\n\r\nexport default class ButtonPanel extends React.Component {\r\n  static propTypes = {\r\n    clickHandler: PropTypes.func,\r\n  };\r\n\r\n  handleClick = buttonName => {\r\n    this.props.clickHandler(buttonName);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-button-panel\">\r\n        <div>\r\n          <Button name=\"AC\" clickHandler={this.handleClick} />\r\n          <Button name=\"+/-\" clickHandler={this.handleClick} />\r\n          <Button name=\"%\" clickHandler={this.handleClick} />\r\n          <Button name=\"รท\" clickHandler={this.handleClick} orange />\r\n        </div>\r\n        <div>\r\n          <Button name=\"7\" clickHandler={this.handleClick} />\r\n          <Button name=\"8\" clickHandler={this.handleClick} />\r\n          <Button name=\"9\" clickHandler={this.handleClick} />\r\n          <Button name=\"x\" clickHandler={this.handleClick} orange />\r\n        </div>\r\n        <div>\r\n          <Button name=\"4\" clickHandler={this.handleClick} />\r\n          <Button name=\"5\" clickHandler={this.handleClick} />\r\n          <Button name=\"6\" clickHandler={this.handleClick} />\r\n          <Button name=\"-\" clickHandler={this.handleClick} orange />\r\n        </div>\r\n        <div>\r\n          <Button name=\"1\" clickHandler={this.handleClick} />\r\n          <Button name=\"2\" clickHandler={this.handleClick} />\r\n          <Button name=\"3\" clickHandler={this.handleClick} />\r\n          <Button name=\"+\" clickHandler={this.handleClick} orange />\r\n        </div>\r\n        <div>\r\n          <Button name=\"0\" clickHandler={this.handleClick} wide />\r\n          <Button name=\".\" clickHandler={this.handleClick} />\r\n          <Button name=\"=\" clickHandler={this.handleClick} orange />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Big from \"big.js\";\r\n\r\nexport default function operate(numberOne, numberTwo, operation) {\r\n  const one = Big(numberOne || \"0\");\r\n  const two = Big(numberTwo || (operation === \"รท\" || operation === 'x' ? \"1\": \"0\")); //If dividing or multiplying, then 1 maintains current value in cases of null\r\n  if (operation === \"+\") {\r\n    return one.plus(two).toString();\r\n  }\r\n  if (operation === \"-\") {\r\n    return one.minus(two).toString();\r\n  }\r\n  if (operation === \"x\") {\r\n    return one.times(two).toString();\r\n  }\r\n  if (operation === \"รท\") {\r\n    if (two === \"0\") {\r\n      alert(\"Divide by 0 error\");\r\n      return \"0\";\r\n    } else {\r\n      return one.div(two).toString();\r\n    }\r\n  }\r\n  throw Error(`Unknown operation '${operation}'`);\r\n}\r\n","import React from \"react\";\r\nimport Display from \"./Display\";\r\nimport ButtonPanel from \"./ButtonPanel\";\r\nimport calculate from \"../logic/calculate\";\r\nimport \"./App.css\";\r\n\r\nexport default class App extends React.Component {\r\n  state = {\r\n    total: null,\r\n    next: null,\r\n    operation: null,\r\n  };\r\n\r\n  handleClick = buttonName => {\r\n    this.setState(calculate(this.state, buttonName));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-app\">\r\n        <Display value={this.state.next || this.state.total || \"0\"} />\r\n        <ButtonPanel clickHandler={this.handleClick} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Big from \"big.js\";\r\n\r\nimport operate from \"./operate\";\r\nimport isNumber from \"./isNumber\";\r\n\r\n/**\r\n * Given a button name and a calculator data object, return an updated\r\n * calculator data object.\r\n *\r\n * Calculator data object contains:\r\n *   total:String      the running total\r\n *   next:String       the next number to be operated on with the total\r\n *   operation:String  +, -, etc.\r\n */\r\nexport default function calculate(obj, buttonName) {\r\n  if (buttonName === \"AC\") {\r\n    return {\r\n      total: null,\r\n      next: null,\r\n      operation: null,\r\n    };\r\n  }\r\n\r\n  if (isNumber(buttonName)) {\r\n    if (buttonName === \"0\" && obj.next === \"0\") {\r\n      return {};\r\n    }\r\n    // If there is an operation, update next\r\n    if (obj.operation) {\r\n      if (obj.next) {\r\n        return { next: obj.next + buttonName };\r\n      }\r\n      return { next: buttonName };\r\n    }\r\n    // If there is no operation, update next and clear the value\r\n    if (obj.next) {\r\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\r\n      return {\r\n        next,\r\n        total: null,\r\n      };\r\n    }\r\n    return {\r\n      next: buttonName,\r\n      total: null,\r\n    };\r\n  }\r\n\r\n  if (buttonName === \"%\") {\r\n    if (obj.operation && obj.next) {\r\n      const result = operate(obj.total, obj.next, obj.operation);\r\n      return {\r\n        total: Big(result)\r\n          .div(Big(\"100\"))\r\n          .toString(),\r\n        next: null,\r\n        operation: null,\r\n      };\r\n    }\r\n    if (obj.next) {\r\n      return {\r\n        next: Big(obj.next)\r\n          .div(Big(\"100\"))\r\n          .toString(),\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  if (buttonName === \".\") {\r\n    if (obj.next) {\r\n      // ignore a . if the next number already has one\r\n      if (obj.next.includes(\".\")) {\r\n        return {};\r\n      }\r\n      return { next: obj.next + \".\" };\r\n    }\r\n    return { next: \"0.\" };\r\n  }\r\n\r\n  if (buttonName === \"=\") {\r\n    if (obj.next && obj.operation) {\r\n      return {\r\n        total: operate(obj.total, obj.next, obj.operation),\r\n        next: null,\r\n        operation: null,\r\n      };\r\n    } else {\r\n      // '=' with no operation, nothing to do\r\n      return {};\r\n    }\r\n  }\r\n\r\n  if (buttonName === \"+/-\") {\r\n    if (obj.next) {\r\n      return { next: (-1 * parseFloat(obj.next)).toString() };\r\n    }\r\n    if (obj.total) {\r\n      return { total: (-1 * parseFloat(obj.total)).toString() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  // Button must be an operation\r\n\r\n  // When the user presses an operation button without having entered\r\n  // a number first, do nothing.\r\n  // if (!obj.next && !obj.total) {\r\n  //   return {};\r\n  // }\r\n\r\n  // User pressed an operation button and there is an existing operation\r\n  if (obj.operation) {\r\n    return {\r\n      total: operate(obj.total, obj.next, obj.operation),\r\n      next: null,\r\n      operation: buttonName,\r\n    };\r\n  }\r\n\r\n  // no operation yet, but the user typed one\r\n\r\n  // The user hasn't typed a number yet, just save the operation\r\n  if (!obj.next) {\r\n    return { operation: buttonName };\r\n  }\r\n\r\n  // save the operation and shift 'next' into 'total'\r\n  return {\r\n    total: obj.next,\r\n    next: null,\r\n    operation: buttonName,\r\n  };\r\n}\r\n","export default function isNumber(item) {\r\n  return /[0-9]+/.test(item);\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./component/App\";\r\nimport \"./index.css\";\r\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}